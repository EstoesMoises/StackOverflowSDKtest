/**
 * Stack Overflow for Teams API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { BountyResponseModel } from '../models/BountyResponseModel';
import { TagSummaryResponseModel } from '../models/TagSummaryResponseModel';
import { UserSummaryResponseModel } from '../models/UserSummaryResponseModel';
import { HttpFile } from '../http/http';

export class QuestionSummaryResponseModel {
    /**
    * ID. The question\'s unique identifier.
    */
    'id'?: number;
    /**
    * Title. The actual question, stated briefly in one sentence.
    */
    'title'?: string;
    /**
    * Question body. The main content of the question in HTML format.
    */
    'body'?: string;
    /**
    * Tags. Tags associated with the question.
    */
    'tags'?: Array<TagSummaryResponseModel>;
    'owner'?: UserSummaryResponseModel;
    'lastEditor'?: UserSummaryResponseModel;
    /**
    * Creation date. The date and time the question was created.
    */
    'creationDate'?: Date;
    /**
    * Last activity date. The date and time the question or one of its answers last had significant activity. This includes (but is not limited to) an edit, rollback, change to tags, new answer, bounty added, bump.
    */
    'lastActivityDate'?: Date | null;
    /**
    * Score. Calculated by subtracting the number of downvotes from the number of upvotes
    */
    'score'?: number;
    /**
    * Is answered. Returns true if the question has at least one upvoted answer.
    */
    'isAnswered'?: boolean;
    /**
    * Answer count. Number of answers to the question.
    */
    'answerCount'?: number;
    /**
    * View count. The number of times users have viewed this question.
    */
    'viewCount'?: number;
    /**
    * URL. The question\'s direct URL.
    */
    'webUrl'?: string;
    /**
    * Share URL. The question\'s URL for sharing.
    */
    'shareUrl'?: string;
    /**
    * Is deleted. Returns true if the question was deleted.
    */
    'isDeleted'?: boolean;
    /**
    * Is obsolete. Returns true if the question was marked by a moderator as obsolete.
    */
    'isObsolete'?: boolean;
    /**
    * Is closed. Returns true if the question was closed by a moderator.
    */
    'isClosed'?: boolean;
    'bounty'?: BountyResponseModel;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string",
            "format": ""
        },
        {
            "name": "body",
            "baseName": "body",
            "type": "string",
            "format": ""
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "Array<TagSummaryResponseModel>",
            "format": ""
        },
        {
            "name": "owner",
            "baseName": "owner",
            "type": "UserSummaryResponseModel",
            "format": ""
        },
        {
            "name": "lastEditor",
            "baseName": "lastEditor",
            "type": "UserSummaryResponseModel",
            "format": ""
        },
        {
            "name": "creationDate",
            "baseName": "creationDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "lastActivityDate",
            "baseName": "lastActivityDate",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "score",
            "baseName": "score",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "isAnswered",
            "baseName": "isAnswered",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "answerCount",
            "baseName": "answerCount",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "viewCount",
            "baseName": "viewCount",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "webUrl",
            "baseName": "webUrl",
            "type": "string",
            "format": ""
        },
        {
            "name": "shareUrl",
            "baseName": "shareUrl",
            "type": "string",
            "format": ""
        },
        {
            "name": "isDeleted",
            "baseName": "isDeleted",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isObsolete",
            "baseName": "isObsolete",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "isClosed",
            "baseName": "isClosed",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "bounty",
            "baseName": "bounty",
            "type": "BountyResponseModel",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return QuestionSummaryResponseModel.attributeTypeMap;
    }

    public constructor() {
    }
}
